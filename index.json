[{"categories":["InfrastructureTesting"],"content":"One aspect of Infrastructure testing is to ensure that systems and services meet a standard. That standard may be yours, your company’s, or one published by a government, group or organization. When it comes to cybersecurity, there are several standards but (in my experience) the two major standards organizations are: National Institute of Standards and Technology (NIST) Center for Internet Security (CIS) ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:0:0","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Terminology Before I get into the specifics of these two standards, I want to take a minute to define some terms. Note  These are my definitions, unless explicitly stated otherwise. Test : A measurement of a configuration item or process. Control : A specific action (countermeasure) taken on a configuration item or process. Profile : A categorization of Controls that achieve a prescribed level of acceptance. Grouping : A logical collection of related Controls Checklist : A collection of Controls, logically grouped by the user, group or organization. Benchmark : A specialization of Checklist, defines an established collection of controls in order to meet a “measurement milestone”. To make that a little more clear, I’ll try to relate it to something different…. A Used Car analogy Let’s say I want to buy a car from a used-car lot. I want to ensure the car is going to last and is in good working order, but I’m far from an expert in automotive maintenance. So, I head to the internet and search for “Chevrolet pre-owned car”. After a couple of clicks, I find a 172-Point Checklist Ok, now that I have the Checklist, I can see that one of the Groupings is “Check Tires and Brake Pads”, there is a minimum tire depth Control. To validate the Control, I would measure (that is Test) the tire tread depth of each tire, if they are \u003e= 5/32nds they pass the Test, and if all four pass, then they pass the Control. Notice the “Hybrid Vehicles” section at the end? If the car I wanted to buy was a hybrid, then I would use the “Hybrid Vehicles” Profile which would change which Controls applied to this car from this Checklist. The process continues through each of the Groupings until I complete the Checklist. If all of the tests pass, I can say that this meets the Benchmark of “Chevrolet certified pre-owned vehicle”. ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:0","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Test In relation to Infrastructure testing, a Test is the atomic unit. It is a comparison between an expected value and the actual value. In the following example: (Get-ADDefaultDomainPasswordPolicy | Select-Object -ExpandProperty 'PasswordHistoryLength') -ge 5 The expected value is 5, the comparison is greater-than or equal to (-ge) and the actual value is what is returned from querying AD, and the result is a boolean value. In programming, these types of tests are also called “assertions”, so in english this could be expressed like: Assert that the Password History Length is greater-than or equal to 5 ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:1","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Control A Control is something that can be measured and marked as “Pass” or “Fail”, and has associated “metadata”. For example: Example Id: 5.2 Title: “Use Unique Passwords” Function: Protect Description: “Use unique passwords for all enterprise assets. Best practice …” ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:2","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Grouping A logical collection of related Controls to aid in categorizing and organization. ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:3","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Profile Example Id: L1 Name: Level 1 Title: “Corporate/Enterprise Environment” ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:4","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Checklist ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:5","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"Benchmark Id: 1.1.1 Title: “Ensure ‘Enforce password history’ is set to ‘24 or more passwords’” Description: “This policy setting determines…..” Rationale: “The longer a user uses the same password, the greater…..” Impact: High Profile: L1 Controls: 5.2 ","date":"2022 Apr 19","objectID":"/posts/auditing-standards-and-frameworks/:1:6","tags":["standards"],"title":"Auditing Standards and Frameworks","uri":"/posts/auditing-standards-and-frameworks/"},{"categories":["InfrastructureTesting"],"content":"A walkthrough of using Pester to test your infrastructure","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":["InfrastructureTesting"],"content":"Use PowerShell’s de facto standard unit testing module to validate your infrastructure is deployed and configured to your specifications. ","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/:0:0","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":["InfrastructureTesting"],"content":"What is “Infrastructure Testing” In my own words, infrastructure testing is: validating that a configuration item is the value that you expect it to be. For example: Is the Operating System Windows Server? Is the DNS service running? Is the count of members of the local ‘Administrators’ group 3? As a sysadmin, these are things that I would check on as part of my daily operations tasks, and also things that I would check on during troubleshooting. But as infrastructure gets larger; spanning across multiple environments, multiple layers of virtualization and multiple vendors, versions and applications it becomes too complex and time consuming to do without automation. ","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/:1:0","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":["InfrastructureTesting"],"content":"Pester testing module Most programming languages have a testing library that allows the developer to write tests that validate that their code does what is expected. PowerShell is no different, and the de-facto module for those tests is Pester Pester follows the Behavior Driven Design “specification” language; mainly the use of Describe, Context, It, and Should. These four “Domain Specific Language (DSL)” keywords allow you to write a test that sounds a lot like natural language. here is an example straight from the Pester documentation: BeforeAll { function Get-Planet ([string]$Name = '*') { $planets = @( @{ Name = 'Mercury' } @{ Name = 'Venus' } @{ Name = 'Earth' } @{ Name = 'Mars' } @{ Name = 'Jupiter' } @{ Name = 'Saturn' } @{ Name = 'Uranus' } @{ Name = 'Neptune' } ) | ForEach-Object { [PSCustomObject] $_ } $planets | Where-Object { $_.Name -like $Name } } } Describe 'Get-Planet' { It 'Given no parameters, it lists all 8 planets' { $allPlanets = Get-Planet $allPlanets.Count | Should -Be 8 } } ","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/:2:0","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":["InfrastructureTesting"],"content":"Operations Validation Framework One of the first modules that used Pester to test infrastructure was Operation Validation Framework. Although the project was abandoned about 3 years ago, it is still available to download from github and the powershell gallery. Breaking Changes WARNING OVF was based on an older version of Pester, and Pester has made some breaking changes in version 5. It probably wont work if you try to use it on a modern system. That said, the design of OVF was strait-forward: Create a module structure with your tests organized into two folders: Diagnostics\\Simple and Diagnostics\\Comprehensive. These files use the Pester default file naming convention, *.Tests.ps1. With your tests organized in this way, calling Invoke-OperationValidation will run the Pester tests in the folders and produce a report of the test name and result. See the example in the README.md ","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/:3:0","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":["InfrastructureTesting"],"content":"Poshspec poshspec added some very useful terms to the DSL, such as File, Hotfix, etc. There is a list of them on the wiki. This made the tests even more like natural language. Unfortunately, this site also stopped being updated around the same time as OVF, and has the same issues when running with Pester v5 ","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/:4:0","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":["InfrastructureTesting"],"content":"PSRemotely Lastly, psremotely was another PowerShell infrastructure testing module based on Pester. It also had its own DSL terms such as Nodes to describe the “target” computers to run the tests on. Where OVF ran the tests locally, PSRemotely ran them, well …. remotely. The idea was to copy the tests and all the modules, scripts and resources required to run them to the remote system, run the tests and then retrieve the results and write them to the local machine as a json object. ","date":"2022 Apr 18","objectID":"/posts/infrastructure-testing-with-pester/:5:0","tags":["powershell","pester"],"title":"Infrastructure Testing With Pester","uri":"/posts/infrastructure-testing-with-pester/"},{"categories":[],"content":"This is my first public post. I intend to use this space for documenting and discussing my personal projects. Over the next few posts, I’ll try to lay out the general subject matter and develop a workflow / schedule for publishing content. Right now, the general tools are github pages, github actions and hugo. I am currently using Markdown as the source format, but I’ve been a long time user of the amazing org mode format, and I see that hugo supports that as well. ","date":"2022 Feb 22","objectID":"/posts/my-first-post/:0:0","tags":["hello","hugo"],"title":"\"Hello World\" | Set-Content blog","uri":"/posts/my-first-post/"}]